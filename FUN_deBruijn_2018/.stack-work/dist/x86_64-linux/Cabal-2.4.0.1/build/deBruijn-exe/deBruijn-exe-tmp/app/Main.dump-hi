
==================== FINAL INTERFACE ====================
2019-03-17 16:10:36.50745261 UTC

interface main:Main 8063
  interface hash: 4cb193583620fabd4791b23c980a4702
  ABI hash: f71f50e78b60e0aef0e6ad22a5a9117e
  export-list hash: 6daa70d19266a47ff8aa4304c2f0e751
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8e1d11ce8797c0156ca85dc8e4af6680
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.assign
  Main.createArgs
  Main.deBruijn_alg
  Main.died
  Main.dispSequence
  Main.exit
  Main.ext
  Main.forIn
  Main.getFlag
  Main.getNo
  Main.getSequence
  Main.main
  Main.processArg
  Main.runArgument
  Main.usage
  Main.Arguments{Main.Arguments}
module dependencies:
package dependencies: base-4.12.0.0* deBruijn-0.1.0.0
                      ghc-prim-0.5.3 integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Control.Monad 7bd27be8172a0ce3a579caee3ae14f88
import  -/  base-4.12.0.0:Data.Foldable 00188ddf89c975fee76bdfad479443c1
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.IO.Exception 93698c4949c2bbf15fd7c864b5701916
import  -/  base-4.12.0.0:GHC.List 734a72beb76d276fb4a0ba2689a5711f
import  -/  base-4.12.0.0:GHC.Num 847723f2584d989dac1eada133ac3fb8
import  -/  base-4.12.0.0:GHC.Real f7dad82c1d43d80823865d3e6c6636e0
import  -/  base-4.12.0.0:GHC.Show 4e438f26d903388cc6c2c5d64ed01b98
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  base-4.12.0.0:System.Environment 2204870ad586be67c274aa49ce9ae53a
import  -/  base-4.12.0.0:System.Exit 9bdfd82d04c0a0b8d920842d9c4e961d
import  -/  base-4.12.0.0:System.IO 88c2b1c4079c52d62ed362d4eb9a5302
import  -/  base-4.12.0.0:Text.Read e428ad664707f4e90693a55e6a6b4b1a
import  -/  deBruijn-0.1.0.0:Lib e2a14fcf79d93e8f8ea00df12363b02a
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
ee1d733e26858701025452393d725a56
  $fShowArguments :: GHC.Show.Show Main.Arguments
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Arguments
                  Main.$fShowArguments_$cshowsPrec
                  Main.$fShowArguments_$cshow
                  Main.$fShowArguments_$cshowList -}
ee1d733e26858701025452393d725a56
  $fShowArguments1 :: Main.Arguments -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U(U),1*U,1*U(U))><L,U>,
     Unfolding: (\ (w :: Main.Arguments) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Arguments ww1 ww2 ww3 ->
                 Main.$w$cshowsPrec 0# ww1 ww2 ww3 w1 }) -}
4e34c77794039f6ca1edde334ee4320d
  $fShowArguments2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Arguments "#) -}
b3f41b29e178c0b9fa9954516420f700
  $fShowArguments3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
ee1d733e26858701025452393d725a56
  $fShowArguments_$cshow :: Main.Arguments -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Arguments) ->
                 Main.$fShowArguments_$cshowsPrec
                   Main.$fShowArguments3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ee1d733e26858701025452393d725a56
  $fShowArguments_$cshowList :: [Main.Arguments] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Arguments]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Arguments Main.$fShowArguments1 ls s) -}
ee1d733e26858701025452393d725a56
  $fShowArguments_$cshowsPrec ::
    GHC.Types.Int -> Main.Arguments -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U,1*U(U))><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Arguments)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Arguments ww3 ww4 ww5 ->
                 Main.$w$cshowsPrec ww1 ww3 ww4 ww5 w2 } }) -}
43ed2422c556c472b08ea61606117835
  $tc'Arguments :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15925518988414544436##
                   5415635688180141772##
                   Main.$trModule
                   Main.$tc'Arguments2
                   0#
                   Main.$tc'Arguments1) -}
0b44fb41144d090996c400591fffb122
  $tc'Arguments1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cfcb433f00ab58c26765e5486ac1245f
  $tc'Arguments2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Arguments3) -}
3339780e43a31038d7ff9212bb436be9
  $tc'Arguments3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Arguments"#) -}
d8489690e3b6a3592e6cd3191561b45a
  $tcArguments :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18191415970497779578##
                   1259205228784102612##
                   Main.$trModule
                   Main.$tcArguments1
                   0#
                   GHC.Types.krep$*) -}
606d8530957b9e421b667efa9cac2f09
  $tcArguments1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcArguments2) -}
a18707bc668ae235f858ab26953a70f4
  $tcArguments2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Arguments"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
f8b69f90e90baf8affbeea1827f0f86e
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U(U)><L,1*U><L,1*U(U)><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Types.Int)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Main.$fShowArguments2
                       (case ww1 of ww4 { GHC.Types.I# ww5 ->
                        case GHC.Show.$wshowSignedInt
                               11#
                               ww5
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.$fShow(,)3
                                     (GHC.Show.showLitString
                                        ww2
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)3
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showSpace1
                                              (case ww3 of ww6 { GHC.Types.I# ww7 ->
                                               case GHC.Show.$wshowSignedInt
                                                      11#
                                                      ww7
                                                      x of ww8 { (#,#) ww9 ww10 ->
                                               GHC.Types.:
                                                 @ GHC.Types.Char
                                                 ww9
                                                 ww10 } })))))) of ww6 { (#,#) ww7 ww8 ->
                        GHC.Types.: @ GHC.Types.Char ww7 ww8 } })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
084b93c830e797fd01c7692b8ddce43c
  $wdeBruijn_alg ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [[GHC.Types.Int]]
    -> (# [GHC.Types.Int], [[GHC.Types.Int]] #)
  {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><S,1*U>,
     Inline: [2] -}
0b7f3ebcc15a434d280a47e0796e3b0f
  $wforIn ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> [[GHC.Types.Int]]
    -> (# [GHC.Types.Int], [[GHC.Types.Int]] #)
  {- Arity: 5, Strictness: <S,U><L,U(U)><S,U><L,U(U)><S,1*U>,
     Inline: [2] -}
9a80969eb71046e85a431dcc1f95509a
  $wprocessArg ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <S,1*U><L,1*U><L,1*U(U)>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Types.Int) ->
                 case ww of wild {
                   DEFAULT
                   -> GHC.IO.Handle.Text.hPutStr'
                        GHC.IO.Handle.FD.stdout
                        (Main.$w$cshowsPrec
                           0#
                           (GHC.Types.I# wild)
                           ww1
                           ww2
                           (GHC.Types.[] @ GHC.Types.Char))
                        GHC.Types.True
                   0# -> Main.main2 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
39c9115a4132bbd5b60bf4e080b66006
  $wrunArgument ::
    GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,U><S,1*U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ww2 of wild {
                   DEFAULT
                   -> case Main.main6
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   0#
                   -> (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         (case ww of ww3 { GHC.Types.I# ww4 ->
                          case Main.$wdeBruijn_alg
                                 ww4
                                 ww1
                                 1#
                                 1#
                                 (GHC.Types.:
                                    @ [GHC.Types.Int]
                                    (GHC.Types.[] @ GHC.Types.Int)
                                    (GHC.Types.:
                                       @ [GHC.Types.Int]
                                       (case GHC.List.$wlenAcc
                                               @ GHC.Types.Char
                                               ww1
                                               0# of ww5 { DEFAULT ->
                                        let {
                                          y :: GHC.Prim.Int# = GHC.Prim.*# ww5 ww4
                                        } in
                                        case GHC.Prim.<# 0# y of lwild {
                                          DEFAULT -> GHC.Types.[] @ GHC.Types.Int
                                          1# -> Main.$wxs y } })
                                       (GHC.Types.[] @ [GHC.Types.Int]))) of ww5 { (#,#) ww6 ww7 ->
                          case ww7 of wild1 {
                            [] -> case Main.main5 ret_ty GHC.Base.String of {}
                            : a_n ds
                            -> case ds of wild2 {
                                 []
                                 -> Main.dispSequence
                                      (Main.Arguments ww3 ww1 Main.$fShowArguments3)
                                      ww6
                                 : ipv ipv1 -> case Main.main5 ret_ty GHC.Base.String of {} } } } })
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        w
                   1#
                   -> (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main3
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        w
                   2#
                   -> (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main3
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        w
                   3#
                   -> (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main3
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        w }) -}
15dd132babc8c63345bd19d72ffca468
  $wxs :: GHC.Prim.Int# -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2, Inline: [2] -}
ee1d733e26858701025452393d725a56
  data Arguments
    = Arguments GHC.Types.Int GHC.Base.String GHC.Types.Int
4db657c53f15a25d240e7e7d29f70ed6
  assign ::
    GHC.Types.Int
    -> GHC.Types.Int -> [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(1*U)><L,U><S,1*U> -}
7118f9b22f725030db22bdd1d054d73d
  createArgs :: [GHC.Base.String] -> Main.Arguments
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [GHC.Base.String]) ->
                 Main.Arguments
                   (Lib.parseNo x)
                   (Lib.parseSequence x)
                   (Lib.parseFlag x)) -}
dd105b8f4353ee9b0ddd444181ced561
  deBruijn_alg ::
    Main.Arguments
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> [[GHC.Types.Int]]
    -> [[GHC.Types.Int]]
  {- Arity: 4,
     Strictness: <S(S(S)LL),1*U(1*U(U),U,A)><S(S),1*U(U)><S(S),1*U(U)><S,1*U>m2,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Main.Arguments)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int)
                   (w3 :: [[GHC.Types.Int]]) ->
                 case w of ww { Main.Arguments ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.I# ww5 ->
                 case w1 of ww6 { GHC.Types.I# ww7 ->
                 case w2 of ww8 { GHC.Types.I# ww9 ->
                 case Main.$wdeBruijn_alg
                        ww5
                        ww2
                        ww7
                        ww9
                        w3 of ww10 { (#,#) ww11 ww12 ->
                 GHC.Types.: @ [GHC.Types.Int] ww11 ww12 } } } } }) -}
1ded9ca97b4a0811d2172a16be7ccad5
  died :: GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>x,
     Unfolding: InlineRule (0, True, True)
                Main.died1
                  `cast`
                (forall (a :: <*>_N). Sym (GHC.Types.N:IO[0] <a>_R)) -}
cf698a0e92699a423873f0fd585ed729
  died1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 1, Strictness: <B,U>x -}
36dedd7092487d67c759da142d51266a
  dispSequence ::
    Main.Arguments -> [GHC.Types.Int] -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(A,U,A)><S,1*U> -}
d5e7ffe1e989f298b8007f26eb1e5d33
  exit :: GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>x,
     Unfolding: InlineRule (0, True, True)
                System.Exit.exitSuccess1
                  `cast`
                (forall (a :: <*>_N). Sym (GHC.Types.N:IO[0] <a>_R)) -}
5044fc179a2fdddc69b5b8337b6646d0
  ext ::
    [GHC.Types.Int]
    -> [GHC.Types.Int] -> GHC.Types.Int -> [[GHC.Types.Int]]
  {- Arity: 3, Strictness: <L,1*U><L,U><L,1*U(U)>m2, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [GHC.Types.Int])
                   (w1 :: [GHC.Types.Int])
                   (w2 :: GHC.Types.Int) ->
                 GHC.Types.:
                   @ [GHC.Types.Int]
                   (GHC.Base.augment
                      @ GHC.Types.Int
                      (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Base.foldr @ GHC.Types.Int @ b c n w)
                      (case w2 of wild1 { GHC.Types.I# y ->
                       case GHC.Prim.<# 0# y of lwild {
                         DEFAULT -> GHC.Types.[] @ GHC.Types.Int
                         1#
                         -> case w1 of wild {
                              [] -> case GHC.List.scanl2 ret_ty [GHC.Types.Int] of {}
                              : ds1 xs -> GHC.List.$wunsafeTake @ GHC.Types.Int y xs } } }))
                   (GHC.Types.:
                      @ [GHC.Types.Int]
                      w1
                      (GHC.Types.[] @ [GHC.Types.Int]))) -}
5f89dafcf8ab6f330651645c5fb427ac
  forIn ::
    GHC.Types.Int
    -> Main.Arguments
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> [[GHC.Types.Int]]
    -> [[GHC.Types.Int]]
  {- Arity: 5,
     Strictness: <S(S),1*U(U)><S(LSL),1*U(U(U),U,A)><L,U(U)><L,A><S,1*U>m2,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Arguments)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int)
                   (w4 :: [[GHC.Types.Int]]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Arguments ww3 ww4 ww5 ->
                 case Main.$wforIn ww1 ww3 ww4 w2 w4 of ww6 { (#,#) ww7 ww8 ->
                 GHC.Types.: @ [GHC.Types.Int] ww7 ww8 } } }) -}
0f1eb2cacae5e94ebe5fab622d5ab064
  getFlag :: Main.Arguments -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Arguments) ->
                 case ds of wild { Main.Arguments ds1 ds2 x -> x }) -}
8b8621ec7d6a276e238bfb7383194ef7
  getNo :: Main.Arguments -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Arguments) ->
                 case ds of wild { Main.Arguments x ds1 ds2 -> x }) -}
8aee56e54466a96d34170aea86490627
  getSequence :: Main.Arguments -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Arguments) ->
                 case ds of wild { Main.Arguments ds1 str ds2 -> str }) -}
8a8c45479d1fb23ac839650f42715d04
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
c700677d4f8afd30db5e12b7e9077530
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.List.$wlenAcc @ [GHC.Types.Char] ipv1 0# of ww2 {
                   DEFAULT
                   -> case Lib.$wparseFlag ipv1 of ww { DEFAULT ->
                      Main.$wrunArgument
                        (Lib.parseNo ipv1)
                        (Lib.parseSequence ipv1)
                        ww
                        ipv }
                   0# -> Main.main2 ipv } }) -}
27fec5d9145264a72808e8b895e78f0e
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
f502147f9a3e5b35326e65f77f808c93
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main4) -}
0e0d834d0d33340c3d43428dc31f8b80
  main4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OK"#) -}
1136d1a8fe363f141ce9949b64a88ee4
  main5 :: ([GHC.Types.Int], [GHC.Types.Int])
  {- Strictness: x -}
062966910f881f98b54d1eadd2721b55
  main6 :: GHC.Types.IO ()
  {- Strictness: x -}
8e8c870c171b48cdbaf3585320018880
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
8bc9154374afeaaf80a665f7b2fba82d
  processArg :: Main.Arguments -> GHC.Types.IO ()
  {- Arity: 1, Strictness: <S(S(S)LL),1*U(1*U(1*U),1*U,1*U(U))>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Arguments) ->
                 case w of ww { Main.Arguments ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.I# ww5 ->
                 Main.$wprocessArg ww5 ww2 ww3 } }) -}
ccc2f1a653ab92acc84dcd508317bfb6
  runArgument :: Main.Arguments -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LLS(S)),1*U(1*U(U),U,1*U(1*U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.runArgument1
                  `cast`
                (<Main.Arguments>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
7526958c77bb46d9eccd8599d480105a
  runArgument1 ::
    Main.Arguments
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LLS(S)),1*U(1*U(U),U,1*U(1*U))><S,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Arguments)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Main.Arguments ww1 ww2 ww3 ->
                 case ww3 of ww4 { GHC.Types.I# ww5 ->
                 Main.$wrunArgument ww1 ww2 ww5 w1 } }) -}
a01ad244a5bf2f928239f45df6f028b5
  usage :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.usage1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
8ad14089a5e88018dcff50513c6140e2
  usage1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.usage12
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         (GHC.Types.[] @ GHC.Types.Char)
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.usage10
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.usage8
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.usage6
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.usage4
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 (GHC.IO.Handle.Text.hPutStr'
                    GHC.IO.Handle.FD.stdout
                    Main.usage2
                    GHC.Types.True)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   ipv10 } } } } } }) -}
107a223d7f638170e4a55e208cd9b14e
  usage10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.usage11) -}
d2602cc7d237b709c376aa8b30c3e948
  usage11 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\t--check\t\tcheck if a sequence is a de Bruijn sequence"#) -}
0a0fde472351eed5d880ce006391a007
  usage12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.usage13) -}
54fa9b557ec74c24e1a15396ae1ad7dc
  usage13 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("USAGE: ./deBruijn n [a] [--check|--unique|--clean]"#) -}
212a026c004f1467ceaa6a3b97209a65
  usage2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.usage3) -}
4c5cd48419c6559b8c8c82be0853f527
  usage3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\ta\t\talphabet [def: \"01\"]"#) -}
e3416b1e773af7178383e3050f3bf5cc
  usage4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.usage5) -}
6a8a57c70aa238ce0ed6282ba05077ed
  usage5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\tn\t\torderof the sequence"#) -}
7682ab3df4da44e396581096ed14857c
  usage6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.usage7) -}
8b1698e141bc04565eee4892f11b5325
  usage7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\t--clean\t\tlist cleaning"#) -}
14d260607b2ab2a0bf94d3311344c30d
  usage8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.usage9) -}
e5646b206fd4011283517470acae5e5f
  usage9 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\t--unique\tcheck if 2 sequences are distinct de Bruijn sequences"#) -}
instance [safe] GHC.Show.Show [Main.Arguments]
  = Main.$fShowArguments
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

