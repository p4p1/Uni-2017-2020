
==================== FINAL INTERFACE ====================
2019-03-17 16:13:48.513177019 UTC

interface deBruijn-0.1.0.0-3y7lalbVcR6Jq5mG6ZfyWc:Lib 8044
  interface hash: 1cd397b3817ae67fc0c3f4a89ea5e681
  ABI hash: 92410e1972f0d04a8e37c061b740f992
  export-list hash: 82473239b3cddb623319d9362f17fdfc
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1f596daf84c7527444ae092b33472386
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.isNumberStr
  Lib.parseFlag
  Lib.parseNo
  Lib.parseSequence
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Unicode 8234c40b59f035e845832a42e8725a00
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:Text.Read 6c02630607b565ffcb34e8127673989b
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
e69d635f338a809487a71563eac5c1ea
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule3 Lib.$trModule1) -}
c4ce18445f7808a23caa6fbd7b9edadf
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule2) -}
55618dbd9fd1f1b087835472238ca55e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lib"#) -}
acce90cefa2a826bc3e8cf05087a2a3f
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule4) -}
57fc513b68fdfa02f4a7d9600dffbb06
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("deBruijn-0.1.0.0-3y7lalbVcR6Jq5mG6ZfyWc"#) -}
bfc98f7f99286e30ef41d56a1d356aa1
  $wparseFlag :: [GHC.Base.String] -> GHC.Prim.Int#
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Base.String]) ->
                 let {
                   $j :: GHC.Prim.Int# <join 0>
                   = let {
                       $j1 :: GHC.Prim.Int# <join 0>
                       = let {
                           $j2 :: GHC.Prim.Int# <join 0>
                           = case GHC.List.$wlenAcc
                                    @ [GHC.Types.Char]
                                    w
                                    0# of ww2 { DEFAULT ->
                             case GHC.Prim.<# ww2 3# of lwild {
                               DEFAULT
                               -> case GHC.Base.eqString
                                         (GHC.List.$w!! @ GHC.Base.String w 2#)
                                         Lib.parseFlag5 of wild {
                                    GHC.Types.False
                                    -> case GHC.Base.eqString
                                              (GHC.List.$w!! @ GHC.Base.String w 2#)
                                              Lib.parseFlag3 of wild1 {
                                         GHC.Types.False
                                         -> case GHC.Base.eqString
                                                   (GHC.List.$w!! @ GHC.Base.String w 2#)
                                                   Lib.parseFlag1 of wild2 {
                                              GHC.Types.False -> 0# GHC.Types.True -> 3# }
                                         GHC.Types.True -> 2# }
                                    GHC.Types.True -> 1# }
                               1# -> 0# } }
                         } in
                         case GHC.List.$wlenAcc @ [GHC.Types.Char] w 0# of ww2 {
                           DEFAULT -> $j2
                           2#
                           -> case GHC.Base.eqString
                                     (GHC.List.$w!! @ GHC.Base.String w 1#)
                                     Lib.parseFlag1 of wild {
                                GHC.Types.False -> $j2 GHC.Types.True -> 3# } }
                     } in
                     case GHC.List.$wlenAcc @ [GHC.Types.Char] w 0# of ww2 {
                       DEFAULT -> $j1
                       2#
                       -> case GHC.Base.eqString
                                 (GHC.List.$w!! @ GHC.Base.String w 1#)
                                 Lib.parseFlag3 of wild {
                            GHC.Types.False -> $j1 GHC.Types.True -> 2# } }
                 } in
                 case GHC.List.$wlenAcc @ [GHC.Types.Char] w 0# of ww2 {
                   DEFAULT -> $j
                   2#
                   -> case GHC.Base.eqString
                             (GHC.List.$w!! @ GHC.Base.String w 1#)
                             Lib.parseFlag5 of wild {
                        GHC.Types.False -> $j GHC.Types.True -> 1# } }) -}
7e01a1df9c7ce2fd0cb86251239785fe
  isNumberStr :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Types.Char]) ->
                 case ds of wild {
                   [] -> GHC.Types.False
                   : ds1 ds2
                   -> case ds1 of wild1 { GHC.Types.C# ds3 ->
                      let {
                        fail :: GHC.Prim.Void# -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <L,A> -}
                        = \ (ds4 :: GHC.Prim.Void#)[OneShot] ->
                          case GHC.List.dropWhile
                                 @ GHC.Types.Char
                                 GHC.Unicode.isDigit
                                 wild of wild2 {
                            [] -> GHC.Types.True
                            : ds5 ys
                            -> case ds5 of wild3 { GHC.Types.C# ds6 ->
                               case ds6 of ds7 {
                                 DEFAULT -> GHC.Types.False '.'# -> Lib.isNumberStr_go ys } } }
                      } in
                      case ds3 of ds4 {
                        DEFAULT -> fail GHC.Prim.void#
                        '.'#
                        -> case ds2 of wild2 {
                             [] -> GHC.Types.False : ipv ipv1 -> fail GHC.Prim.void# } } } }) -}
7ee32e65b93db7b1680c73378e7475be
  isNumberStr_go :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
83f1b0ebcd1fc13c13b1ca5b6a0c0fc5
  parseFlag :: [GHC.Base.String] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Base.String]) ->
                 case Lib.$wparseFlag w of ww { DEFAULT -> GHC.Types.I# ww }) -}
d70e65ee95d8aefac7e506dc22ceb081
  parseFlag1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Lib.parseFlag2) -}
0a2a3946bd67f2085a0a9b85d62521a4
  parseFlag2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("--clean"#) -}
cf92b796e56ad40e16750371508a2d2c
  parseFlag3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Lib.parseFlag4) -}
5671bae3682f2174ae95d976d7ae28df
  parseFlag4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("--unique"#) -}
5c7c0b98e8cdf394633792faa286f7cf
  parseFlag5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Lib.parseFlag6) -}
d64bd8163bf5393844dd3d169a658244
  parseFlag6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("--check"#) -}
3bf49f1b1bf6302d06f923077fbeafb5
  parseNo :: [GHC.Base.String] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild {
                   [] -> Lib.parseNo4
                   : x xs
                   -> case Lib.isNumberStr x of wild1 {
                        GHC.Types.False -> Lib.parseNo4
                        GHC.Types.True
                        -> case Text.Read.readEither8
                                  @ GHC.Types.Int
                                  (Text.ParserCombinators.ReadP.run
                                     @ GHC.Types.Int
                                     Lib.parseNo3
                                     x) of wild2 {
                             [] -> Lib.parseNo2
                             : x1 ds1
                             -> case ds1 of wild3 {
                                  [] -> x1 : ipv ipv1 -> Lib.parseNo1 } } } }) -}
7bf8cccab96b202c089b0bc6051a1b65
  parseNo1 :: GHC.Types.Int
  {- Strictness: x -}
8bce02ed77b72b3880400ceac5d34b02
  parseNo2 :: GHC.Types.Int
  {- Strictness: x -}
2349c77f62dabdf8ddcf801aa86c0d9e
  parseNo3 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither7 @ GHC.Types.Int)) -}
6a1522b045cb7e50c017eb3bda825f7f
  parseNo4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
7d1fc233612b5a8324687a47cbed1482
  parseSequence :: [GHC.Base.String] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (x :: [GHC.Base.String]) ->
                 case GHC.List.$wlenAcc @ [GHC.Types.Char] x 0# of ww2 { DEFAULT ->
                 case GHC.Prim.<# ww2 2# of lwild {
                   DEFAULT
                   -> case GHC.List.$w!!
                             @ GHC.Types.Char
                             (GHC.List.$w!! @ GHC.Base.String x 1#)
                             0# of wild { GHC.Types.C# x1 ->
                      case x1 of wild1 {
                        DEFAULT -> GHC.List.$w!! @ GHC.Base.String x 1#
                        '-'# -> Lib.parseSequence1 } }
                   1# -> Lib.parseSequence1 } }) -}
f3ac1f95c307f7ac77b914bf24ffeebd
  parseSequence1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Lib.parseSequence2) -}
97004d1eb1cee950ed010c1e27db7f75
  parseSequence2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("01"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

